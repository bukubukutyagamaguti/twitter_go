// Code generated by MockGen. DO NOT EDIT.
// Source: post_repository.go

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	domain "api/server/domain"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockPostRepository is a mock of PostRepository interface.
type MockPostRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPostRepositoryMockRecorder
}

// MockPostRepositoryMockRecorder is the mock recorder for MockPostRepository.
type MockPostRepositoryMockRecorder struct {
	mock *MockPostRepository
}

// NewMockPostRepository creates a new mock instance.
func NewMockPostRepository(ctrl *gomock.Controller) *MockPostRepository {
	mock := &MockPostRepository{ctrl: ctrl}
	mock.recorder = &MockPostRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPostRepository) EXPECT() *MockPostRepositoryMockRecorder {
	return m.recorder
}

// Related mocks base method.
func (m *MockPostRepository) Related(arg0, arg1 string, arg2 int) (domain.Posts, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Related", arg0, arg1, arg2)
	ret0, _ := ret[0].(domain.Posts)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Related indicates an expected call of Related.
func (mr *MockPostRepositoryMockRecorder) Related(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Related", reflect.TypeOf((*MockPostRepository)(nil).Related), arg0, arg1, arg2)
}

// Store mocks base method.
func (m *MockPostRepository) Store(arg0 domain.Post) (domain.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Store", arg0)
	ret0, _ := ret[0].(domain.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Store indicates an expected call of Store.
func (mr *MockPostRepositoryMockRecorder) Store(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Store", reflect.TypeOf((*MockPostRepository)(nil).Store), arg0)
}
