// Code generated by MockGen. DO NOT EDIT.
// Source: follow_repository.go

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	domain "api/server/domain"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockFollowRepository is a mock of FollowRepository interface.
type MockFollowRepository struct {
	ctrl     *gomock.Controller
	recorder *MockFollowRepositoryMockRecorder
}

// MockFollowRepositoryMockRecorder is the mock recorder for MockFollowRepository.
type MockFollowRepositoryMockRecorder struct {
	mock *MockFollowRepository
}

// NewMockFollowRepository creates a new mock instance.
func NewMockFollowRepository(ctrl *gomock.Controller) *MockFollowRepository {
	mock := &MockFollowRepository{ctrl: ctrl}
	mock.recorder = &MockFollowRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFollowRepository) EXPECT() *MockFollowRepositoryMockRecorder {
	return m.recorder
}

// DeleteById mocks base method.
func (m *MockFollowRepository) DeleteById(arg0 domain.Follow) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteById", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteById indicates an expected call of DeleteById.
func (mr *MockFollowRepositoryMockRecorder) DeleteById(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteById", reflect.TypeOf((*MockFollowRepository)(nil).DeleteById), arg0)
}

// Update mocks base method.
func (m *MockFollowRepository) Update(arg0 domain.Follow) (domain.Follow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(domain.Follow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockFollowRepositoryMockRecorder) Update(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockFollowRepository)(nil).Update), arg0)
}

// WhereById mocks base method.
func (m *MockFollowRepository) WhereById(arg0 string, arg1 int) (domain.Follows, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WhereById", arg0, arg1)
	ret0, _ := ret[0].(domain.Follows)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WhereById indicates an expected call of WhereById.
func (mr *MockFollowRepositoryMockRecorder) WhereById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WhereById", reflect.TypeOf((*MockFollowRepository)(nil).WhereById), arg0, arg1)
}

// WhereByUserIdAndFollowId mocks base method.
func (m *MockFollowRepository) WhereByUserIdAndFollowId(arg0 string, arg1, arg2 int) (domain.Follow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WhereByUserIdAndFollowId", arg0, arg1, arg2)
	ret0, _ := ret[0].(domain.Follow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WhereByUserIdAndFollowId indicates an expected call of WhereByUserIdAndFollowId.
func (mr *MockFollowRepositoryMockRecorder) WhereByUserIdAndFollowId(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WhereByUserIdAndFollowId", reflect.TypeOf((*MockFollowRepository)(nil).WhereByUserIdAndFollowId), arg0, arg1, arg2)
}
